<?php

namespace Tests\Feature;

use App\Models\Grade;
use App\Models\GradeLearner;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class GradeLearnerTest extends TestCase
{
    use RefreshDatabase;

    //Test that a Grade Learner can be created in the database
    public function test_a_grade_learner_can_be_created()
    {
        //Create a Grade
        $grade = Grade::factory()->create();

        //Create a Grade Learner
        $this->postJson('/api/grade_learner/store', [
            'grade_id' => $grade->id,
            'learner_id' => 1
        ]);

        $this->assertCount(1, GradeLearner::all());
    }

    //Test that all Grade Learners can be fetched from the database

    public function test_all_grade_learners_can_be_fetched_from_the_database()
    {
        //Create 15 Grades (Pagination)
        $grades = Grade::factory(15)->create();

        //Create 15 Grade Learners from the Grade ids that were generated from the factory
        foreach ($grades as $grade) {
            GradeLearner::factory()->create([
                'grade_id' => $grade->id,
                'learner_id' => $grade->id
            ]);
        }

        //Ensure that the 15 Grade Learners were created 
        $this->assertCount(15, GradeLearner::all());

        //Get all the Grade Learners from the database
        $grade_learners = $this->getJson('/api/grade_learner/index');

        //Ensure that 15 Grade Learners were fetched from the database
        $grade_learners->assertJsonCount(15, 'data');
    }


    //Test that a Grade Learner with a given id can be fetched from the database
    public function test_grade_learner_with_a_given_id_can_be_fetched_from_the_database()
    {
        //Create 10 Grades
        $grades = Grade::factory(10)->create();

        //Create another Grade
        $grade = Grade::factory()->create();

        //Create 10 Grade Learners from the 10 Grades that were generated by the factory
        foreach($grades as $grade)
         {
             GradeLearner::factory()->create([
                 'grade_id' => $grade->id ,
                 'learner_id' => $grade->id
             ]);
         }

        //Create a Grade Learner from the last Grade id that were generated from the factory
        $grade_learner = GradeLearner::factory()->create([
            'grade_id' => $grade->id,
            'learner_id' => $grade->id
        ]);

        //Fetch the Grade Learner with the last id
        $response = $this->getJson('/api/grade_learner/show/'.$grade_learner->id);

        //Ensure that exactly the created Grade Learner was fetched from the database
        $response->assertJson([
            'grade_id' => $grade->id,
            'learner_id' => $grade->id
        ]);
    }


    //Test that a Grade Learner can be deleted from the database
    public function test_that_a_grade_learner_can_be_deleted()
    {
        //Create 10 Grades
        $grades = Grade::factory(10)->create();

        //Create another Grade
        $grade = Grade::factory()->create();

        //Create 10 Grade Learners from the 10 Grades that were generated by the factory
        foreach($grades as $grade)
         {
             GradeLearner::factory()->create([
                 'grade_id' => $grade->id ,
                 'learner_id' => $grade->id
             ]);
         }

        //Create a Grade Learner from the last Grade id that were generated from the factory
        $grade_learner = GradeLearner::factory()->create([
            'grade_id' => $grade->id,
            'learner_id' => $grade->id
        ]);

        //Ensure that there are 11 Grade Learners
        $this->assertCount(11, GradeLearner::all());

        //Delete the last Grade Learner that was created
        $this->deleteJson('/api/grade_learner/destroy/'. $grade_learner->id);

        //Ensure that there are only 10 Grade Learners left and the last one was deleted
        $this->assertCount(10, GradeLearner::all());
    }
}
